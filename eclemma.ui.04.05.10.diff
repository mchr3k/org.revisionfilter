Index: plugin.xml
===================================================================
--- plugin.xml	(revision 989)
+++ plugin.xml	(working copy)
@@ -1,6 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <?eclipse version="3.0"?>
 <plugin>
+   <extension-point id="coverageFilter" name="CoverageFilter" schema="schema/coverageFilter.exsd"/>
    <extension
          point="org.eclipse.core.runtime.adapters">
       <factory
Index: schema/coverageFilter.exsd
===================================================================
--- schema/coverageFilter.exsd	(revision 0)
+++ schema/coverageFilter.exsd	(revision 0)
@@ -0,0 +1,102 @@
+<?xml version='1.0' encoding='UTF-8'?>
+<!-- Schema file written by PDE -->
+<schema targetNamespace="com.mountainminds.eclemma.ui" xmlns="http://www.w3.org/2001/XMLSchema">
+<annotation>
+      <appInfo>
+         <meta.schema plugin="com.mountainminds.eclemma.ui" id="coverageFilter" name="CoverageFilter"/>
+      </appInfo>
+      <documentation>
+         [Enter description of this extension point.]
+      </documentation>
+   </annotation>
+
+   <element name="extension">
+      <annotation>
+         <appInfo>
+            <meta.element />
+         </appInfo>
+      </annotation>
+      <complexType>
+         <choice minOccurs="1" maxOccurs="unbounded">
+            <element ref="coverageFilter"/>
+         </choice>
+         <attribute name="point" type="string" use="required">
+            <annotation>
+               <documentation>
+                  
+               </documentation>
+            </annotation>
+         </attribute>
+         <attribute name="id" type="string">
+            <annotation>
+               <documentation>
+                  
+               </documentation>
+            </annotation>
+         </attribute>
+         <attribute name="name" type="string">
+            <annotation>
+               <documentation>
+                  
+               </documentation>
+               <appInfo>
+                  <meta.attribute translatable="true"/>
+               </appInfo>
+            </annotation>
+         </attribute>
+      </complexType>
+   </element>
+
+   <element name="coverageFilter">
+      <complexType>
+         <attribute name="Class" type="string">
+            <annotation>
+               <documentation>
+                  
+               </documentation>
+               <appInfo>
+                  <meta.attribute kind="java" basedOn=":com.mountainminds.eclemma.core.analysis.ICoverageFilter"/>
+               </appInfo>
+            </annotation>
+         </attribute>
+      </complexType>
+   </element>
+
+   <annotation>
+      <appInfo>
+         <meta.section type="since"/>
+      </appInfo>
+      <documentation>
+         [Enter the first release in which this extension point appears.]
+      </documentation>
+   </annotation>
+
+   <annotation>
+      <appInfo>
+         <meta.section type="examples"/>
+      </appInfo>
+      <documentation>
+         [Enter extension point usage example here.]
+      </documentation>
+   </annotation>
+
+   <annotation>
+      <appInfo>
+         <meta.section type="apiinfo"/>
+      </appInfo>
+      <documentation>
+         [Enter API information here.]
+      </documentation>
+   </annotation>
+
+   <annotation>
+      <appInfo>
+         <meta.section type="implementation"/>
+      </appInfo>
+      <documentation>
+         [Enter information about supplied implementation of this extension point.]
+      </documentation>
+   </annotation>
+
+
+</schema>
Index: src/com/mountainminds/eclemma/internal/ui/actions/ExportSessionAction.java
===================================================================
--- src/com/mountainminds/eclemma/internal/ui/actions/ExportSessionAction.java	(revision 989)
+++ src/com/mountainminds/eclemma/internal/ui/actions/ExportSessionAction.java	(working copy)
@@ -21,7 +21,7 @@
  * This action launches the export session wizard.
  * 
  * @author  Marc R. Hoffmann
- * @version $Revision: $
+ * @version $Revision$
  */
 public class ExportSessionAction extends Action {
   
Index: src/com/mountainminds/eclemma/internal/ui/actions/ImportSessionAction.java
===================================================================
--- src/com/mountainminds/eclemma/internal/ui/actions/ImportSessionAction.java	(revision 989)
+++ src/com/mountainminds/eclemma/internal/ui/actions/ImportSessionAction.java	(working copy)
@@ -21,7 +21,7 @@
  * This action launches the import session wizard.
  * 
  * @author  Marc R. Hoffmann
- * @version $Revision: $
+ * @version $Revision$
  */
 public class ImportSessionAction extends Action {
   
Index: src/com/mountainminds/eclemma/internal/ui/actions/ToggleExtensionFilterAction.java
===================================================================
--- src/com/mountainminds/eclemma/internal/ui/actions/ToggleExtensionFilterAction.java	(revision 0)
+++ src/com/mountainminds/eclemma/internal/ui/actions/ToggleExtensionFilterAction.java	(revision 0)
@@ -0,0 +1,74 @@
+package com.mountainminds.eclemma.internal.ui.actions;
+
+import org.eclipse.jface.action.Action;
+
+import com.mountainminds.eclemma.core.CoverageTools;
+import com.mountainminds.eclemma.core.ISessionManager;
+import com.mountainminds.eclemma.core.analysis.ICoverageFilter;
+import com.mountainminds.eclemma.internal.ui.coverageview.CoverageView;
+import com.mountainminds.eclemma.internal.ui.coverageview.SelectCounterModeAction;
+import com.mountainminds.eclemma.internal.ui.coverageview.ViewSettings;
+
+/**
+ * GUI Action used to toggle whether a filter is active or not.
+ */
+public class ToggleExtensionFilterAction extends Action {
+
+  private boolean filterEnabled = false;
+  private final ICoverageFilter mFilter;
+  private final SelectCounterModeAction[] mCoverageModes;
+  private final ViewSettings mSettings;
+  private final CoverageView mView;
+
+  public ToggleExtensionFilterAction(ICoverageFilter filter, CoverageView view,
+      ViewSettings settings, SelectCounterModeAction[] otherModes) {
+    super(filter.getName(), AS_CHECK_BOX);
+    setChecked(filterEnabled);
+    mFilter = filter;
+    mSettings = settings;
+    mCoverageModes = otherModes;
+    mView = view;
+  }
+
+  public void run() {
+    filterEnabled = isChecked();
+    if (filterEnabled) {
+      // Enable the filter
+
+      // Uncheck all modes
+      for (int ii = 0; ii < mCoverageModes.length; ii++) {
+        mCoverageModes[ii].setChecked(false);
+      }
+
+      // Set the preferred mode
+      mCoverageModes[mFilter.preferredMode()].setChecked(true);
+      mSettings.setCounterMode(mFilter.preferredMode());
+      mView.updateColumnHeaders();
+
+      // Disable all disabled modes
+      int[] disabledModes = mFilter.disabledModes();
+      for (int ii = 0; ii < disabledModes.length; ii++) {
+        mCoverageModes[disabledModes[ii]].setEnabled(false);
+      }
+
+      // Setup the filter
+      mFilter.resetFilter();
+      CoverageTools.addCoverageFilter(mFilter);
+    } else {
+      // Disable the filter
+      CoverageTools.removeCoverageFilter(mFilter);
+
+      // Check the Coverage Filters state
+      if (!CoverageTools.coverageFiltersActive()) {
+        // Only revert the UI if there are no filters left
+        // Enabled all previously disabled modes
+        int[] disabledModes = mFilter.disabledModes();
+        for (int ii = 0; ii < disabledModes.length; ii++) {
+          mCoverageModes[disabledModes[ii]].setEnabled(true);
+        }
+      }
+    }
+    ISessionManager manager = CoverageTools.getSessionManager();
+    manager.refreshActiveSession();
+  }
+}
Index: src/com/mountainminds/eclemma/internal/ui/annotation/CoverageAnnotationModel.java
===================================================================
--- src/com/mountainminds/eclemma/internal/ui/annotation/CoverageAnnotationModel.java	(revision 989)
+++ src/com/mountainminds/eclemma/internal/ui/annotation/CoverageAnnotationModel.java	(working copy)
@@ -41,31 +41,31 @@
 /**
  * IAnnotationModel implementation for efficient coverage highlighting.
  * 
- * @author  Marc R. Hoffmann
+ * @author Marc R. Hoffmann
  * @version $Revision$
  */
 public class CoverageAnnotationModel implements IAnnotationModel {
-  
+
   /** Key used to piggyback our model to the editor's model. */
   private static final Object KEY = new Object();
-  
+
   /** List of current CoverageAnnotation objects */
   private List annotations = new ArrayList(32);
 
   /** List of registered IAnnotationModelListener */
   private List annotationModelListeners = new ArrayList(2);
-  
+
   private final ITextEditor editor;
   private final IDocument document;
   private int openConnections = 0;
   private boolean annotated = false;
-  
+
   private IJavaCoverageListener coverageListener = new IJavaCoverageListener() {
     public void coverageChanged() {
       updateAnnotations(true);
     }
   };
-  
+
   private IDocumentListener documentListener = new IDocumentListener() {
     public void documentChanged(DocumentEvent event) {
       updateAnnotations(false);
@@ -93,7 +93,7 @@
     IAnnotationModel model = provider.getAnnotationModel(editor.getEditorInput());
     if (!(model instanceof IAnnotationModelExtension)) return;
     IAnnotationModelExtension modelex = (IAnnotationModelExtension) model;
-    
+
     IDocument document = provider.getDocument(editor.getEditorInput());
     
     CoverageAnnotationModel coveragemodel = (CoverageAnnotationModel) modelex.getAnnotationModel(KEY);
@@ -102,7 +102,7 @@
       modelex.addAnnotationModel(KEY, coveragemodel);
     }
   }
-  
+
   /**
    * Detaches the coverage annotation model from the given editor. If the editor
    * does not have a model attached, this method does nothing.
@@ -118,7 +118,7 @@
     IAnnotationModelExtension modelex = (IAnnotationModelExtension) model;
     modelex.removeAnnotationModel(KEY);
   }
-  
+
   protected void updateAnnotations(boolean force) {
     ILineCoverage lineCoverage = null;
     boolean annotate = false;
@@ -135,16 +135,16 @@
     if (annotate) {
       if (!annotated || force) {
         createAnnotations(lineCoverage);
-        annotated = true; 
+        annotated = true;
       }
     } else {
       if (annotated) {
         clear();
-        annotated = false; 
+        annotated = false;
       }
     }
   }
-  
+
   protected boolean hasSource(IJavaElement element) {
     if (element instanceof ISourceReference) {
       try {
@@ -169,7 +169,7 @@
     
     return coverage.getLineCoverage();
   }
-  
+
   protected void clear() {
     AnnotationModelEvent event = new AnnotationModelEvent(this);
     clear(event);
@@ -191,26 +191,28 @@
     int lastline = linecoverage.getLastLine();
     int offset = linecoverage.getOffset();
     byte[] coverage = linecoverage.getCoverage();
-    try {
-      for (int l = firstline ; l <= lastline; l++) {
-        int status = coverage[l - offset];
-        if (status != ILineCoverage.NO_CODE) {
-          IRegion region = document.getLineInformation(l - 1);
-          int docoffset = region.getOffset();
-          int doclength = region.getLength();
-          // Extend annotation for subsequent lines with same status:
-          while (l < lastline && coverage[l + 1 - offset] == status) {
-            l++;
-            region = document.getLineInformation(l - 1);
-            doclength = region.getOffset() - docoffset + region.getLength();
+    if (coverage != null) {
+      try {
+        for (int l = firstline; l <= lastline; l++) {
+          int status = coverage[l - offset];
+          if (status != ILineCoverage.NO_CODE) {
+            IRegion region = document.getLineInformation(l - 1);
+            int docoffset = region.getOffset();
+            int doclength = region.getLength();
+            // Extend annotation for subsequent lines with same status:
+            while (l < lastline && coverage[l + 1 - offset] == status) {
+              l++;
+              region = document.getLineInformation(l - 1);
+              doclength = region.getOffset() - docoffset + region.getLength();
+            }
+            CoverageAnnotation ca = new CoverageAnnotation(docoffset, doclength, status);
+            annotations.add(ca);
+            event.annotationAdded(ca);
           }
-          CoverageAnnotation ca = new CoverageAnnotation(docoffset, doclength, status);
-          annotations.add(ca);
-          event.annotationAdded(ca);
         }
+      } catch (BadLocationException ex) {
+        EclEmmaUIPlugin.log(ex);
       }
-    } catch (BadLocationException ex) {
-      EclEmmaUIPlugin.log(ex);
     }
     fireModelChanged(event);
   }
@@ -226,11 +228,11 @@
   public void removeAnnotationModelListener(IAnnotationModelListener listener) {
     annotationModelListeners.remove(listener);
   }
-  
+
   protected void fireModelChanged(AnnotationModelEvent event) {
     event.markSealed();
     if (!event.isEmpty()) {
-      for (Iterator i = annotationModelListeners.iterator(); i.hasNext(); ) {
+      for (Iterator i = annotationModelListeners.iterator(); i.hasNext();) {
         IAnnotationModelListener l = (IAnnotationModelListener) i.next();
         if (l instanceof IAnnotationModelListenerExtension) {
           ((IAnnotationModelListenerExtension) l).modelChanged(event);
@@ -242,7 +244,7 @@
   }
 
   public void connect(IDocument document) {
-    if (this.document != document) 
+    if (this.document != document)
       throw new RuntimeException("Can't connect to different document."); //$NON-NLS-1$
     for (Iterator i = annotations.iterator(); i.hasNext();) {
       CoverageAnnotation ca = (CoverageAnnotation) i.next();
@@ -257,9 +259,9 @@
       document.addDocumentListener(documentListener);
     }
   }
-  
+
   public void disconnect(IDocument document) {
-    if (this.document != document) 
+    if (this.document != document)
       throw new RuntimeException("Can't disconnect from different document."); //$NON-NLS-1$
     for (Iterator i = annotations.iterator(); i.hasNext();) {
       CoverageAnnotation ca = (CoverageAnnotation) i.next();
@@ -270,7 +272,7 @@
       document.removeDocumentListener(documentListener);
     }
   }
-  
+
   /**
    * External modification is not supported.
    */
Index: src/com/mountainminds/eclemma/internal/ui/coverageview/CoverageView.java
===================================================================
--- src/com/mountainminds/eclemma/internal/ui/coverageview/CoverageView.java	(revision 989)
+++ src/com/mountainminds/eclemma/internal/ui/coverageview/CoverageView.java	(working copy)
@@ -12,6 +12,12 @@
 
 import java.text.DecimalFormat;
 
+import org.eclipse.core.runtime.CoreException;
+import org.eclipse.core.runtime.IConfigurationElement;
+import org.eclipse.core.runtime.ISafeRunnable;
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.Platform;
+import org.eclipse.core.runtime.Status;
 import org.eclipse.jdt.core.IPackageFragmentRoot;
 import org.eclipse.jdt.ui.IContextMenuConstants;
 import org.eclipse.jdt.ui.actions.IJavaEditorActionDefinitionIds;
@@ -58,6 +64,7 @@
 import com.mountainminds.eclemma.core.ICoverageSession;
 import com.mountainminds.eclemma.core.ISessionListener;
 import com.mountainminds.eclemma.core.analysis.ICounter;
+import com.mountainminds.eclemma.core.analysis.ICoverageFilter;
 import com.mountainminds.eclemma.core.analysis.IJavaCoverageListener;
 import com.mountainminds.eclemma.core.analysis.IJavaElementCoverage;
 import com.mountainminds.eclemma.internal.ui.ContextHelp;
@@ -69,6 +76,7 @@
 import com.mountainminds.eclemma.internal.ui.actions.RefreshSessionAction;
 import com.mountainminds.eclemma.internal.ui.actions.RemoveActiveSessionAction;
 import com.mountainminds.eclemma.internal.ui.actions.RemoveAllSessionsAction;
+import com.mountainminds.eclemma.internal.ui.actions.ToggleExtensionFilterAction;
 
 /**
  * Implementation of the coverage view.
@@ -301,7 +309,8 @@
           return true;
         } else {
           IJavaElementCoverage c = CoverageTools.getCoverageInfo(element);
-          if (c == null || c.getInstructionCounter().getTotalCount() == 0) {
+          if (c == null || c.getInstructionCounter().getTotalCount() == 0
+              || c.getLineCounter().getTotalCount() == 0) {
             return false;
           }
           if (settings.getHideUnusedTypes()) {
@@ -421,17 +430,75 @@
     mm.add(new SelectEntryModeAction(ViewSettings.ENTRYMODE_TYPES, settings,
         this));
     mm.add(new Separator());
-    mm.add(new SelectCounterModeAction(0, settings, this));
-    mm.add(new SelectCounterModeAction(1, settings, this));
-    mm.add(new SelectCounterModeAction(2, settings, this));
-    mm.add(new SelectCounterModeAction(3, settings, this));
-    mm.add(new SelectCounterModeAction(4, settings, this));
+    SelectCounterModeAction instrMode = new SelectCounterModeAction(0,
+        settings, this);
+    SelectCounterModeAction blockMode = new SelectCounterModeAction(1,
+        settings, this);
+    SelectCounterModeAction lineMode = new SelectCounterModeAction(2, settings,
+        this);
+    SelectCounterModeAction methodMode = new SelectCounterModeAction(3,
+        settings, this);
+    SelectCounterModeAction typeMode = new SelectCounterModeAction(4, settings,
+        this);
+    mm.add(instrMode);
+    mm.add(blockMode);
+    mm.add(lineMode);
+    mm.add(methodMode);
+    mm.add(typeMode);
     mm.add(new Separator());
     mm.add(new HideUnusedTypesAction(settings, this));
     mm.add(new Separator());
     mm.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
+    getFilterExtensions(mm, settings, new SelectCounterModeAction[] {
+        instrMode, blockMode, lineMode, methodMode, typeMode });
   }
 
+  // This is the ID of the extension point
+  private static final String ICOVERAGEFILTER_ID = "com.mountainminds.eclemma.ui.coverageFilter"; //$NON-NLS-1$
+
+  /**
+   * Load any extensions which define coverage filters and add GUI elements to
+   * enable them to be toggled.
+   * 
+   * @param mm
+   *          IMenuManager to add actions to.
+   * @param settings
+   * @param lineMode
+   * @param instrMode
+   * @param selectCounterModeActions
+   */
+  private void getFilterExtensions(final IMenuManager mm,
+      final ViewSettings settings,
+      final SelectCounterModeAction[] selectCounterModeActions) {
+    try {
+      final CoverageView view = this;
+      IConfigurationElement[] config = Platform.getExtensionRegistry()
+          .getConfigurationElementsFor(ICOVERAGEFILTER_ID);
+      for (int i = 0; i < config.length; i++) {
+        IConfigurationElement e = config[i];
+        final Object o = e.createExecutableExtension("Class"); //$NON-NLS-1$
+        if (o instanceof ICoverageFilter) {
+          ISafeRunnable runnable = new ISafeRunnable() {
+            public void handleException(Throwable exception) {
+              // Throw away - platform will log to the Error Log
+            }
+
+            public void run() throws Exception {
+              IAction action = new ToggleExtensionFilterAction(
+                  (ICoverageFilter) o, view, settings, selectCounterModeActions);
+              mm.add(action);
+            }
+          };
+          Platform.run(runnable);
+        }
+      }
+    } catch (CoreException ex) {
+      IStatus status = new Status(IStatus.ERROR, EclEmmaUIPlugin.ID,
+          IStatus.ERROR, "IConfigurationElement was invalid.", ex); //$NON-NLS-1$
+      EclEmmaUIPlugin.getInstance().getLog().log(status);
+    }
+  }
+
   public void configureContextMenu(IMenuManager mm) {
     mm.add(openAction);
     mm.add(new Separator());
@@ -456,7 +523,7 @@
     super.dispose();
   }
 
-  protected void updateColumnHeaders() {
+  public void updateColumnHeaders() {
     String[] columns = settings.getCounterMode().getColumnHeaders();
     column0.setText(columns[0]);
     column1.setText(columns[1]);
@@ -499,5 +566,4 @@
     }
     return false;
   }
-
 }
Index: src/com/mountainminds/eclemma/internal/ui/coverageview/SelectCounterModeAction.java
===================================================================
--- src/com/mountainminds/eclemma/internal/ui/coverageview/SelectCounterModeAction.java	(revision 989)
+++ src/com/mountainminds/eclemma/internal/ui/coverageview/SelectCounterModeAction.java	(working copy)
@@ -11,16 +11,16 @@
 
 /**
  * Action to select the counter mode. Internally used by the coverage view.
- *  
- * @author  Marc R. Hoffmann
+ * 
+ * @author Marc R. Hoffmann
  * @version $Revision$
  */
-class SelectCounterModeAction extends Action {
+public class SelectCounterModeAction extends Action {
 
   private final int modeidx;
   private final ViewSettings settings;
   private final CoverageView view;
-  
+
   SelectCounterModeAction(int modeidx, ViewSettings settings, CoverageView view) {
     super(ViewSettings.COUNTERMODES[modeidx].getActionLabel(), AS_RADIO_BUTTON);
     this.modeidx = modeidx;
Index: src/com/mountainminds/eclemma/internal/ui/EclEmmaUIPlugin.java
===================================================================
--- src/com/mountainminds/eclemma/internal/ui/EclEmmaUIPlugin.java	(revision 989)
+++ src/com/mountainminds/eclemma/internal/ui/EclEmmaUIPlugin.java	(working copy)
@@ -31,84 +31,84 @@
 
 /**
  * 
- * @author  Marc R. Hoffmann
+ * @author Marc R. Hoffmann
  * @version $Revision$
  */
 public class EclEmmaUIPlugin extends AbstractUIPlugin {
-  
+
   public static final String ID = "com.mountainminds.eclemma.ui"; //$NON-NLS-1$
-  
+
   /** Identifier for the 'coverage' launch group. */
-  public static final String ID_COVERAGE_LAUNCH_GROUP = ID + ".launchGroup.coverage"; //$NON-NLS-1$  
+  public static final String ID_COVERAGE_LAUNCH_GROUP = ID
+      + ".launchGroup.coverage"; //$NON-NLS-1$  
 
-  
   // Icons used by the Plugin
-  
-  public static final String ELCL_REFRESH       = "icons/full/elcl16/refresh.gif"; //$NON-NLS-1$
-  public static final String DLCL_REFRESH       = "icons/full/dlcl16/refresh.gif"; //$NON-NLS-1$
-  public static final String ELCL_IMPORT        = "icons/full/elcl16/import.gif"; //$NON-NLS-1$
-  public static final String DLCL_IMPORT        = "icons/full/dlcl16/import.gif"; //$NON-NLS-1$
-  public static final String ELCL_EXPORT        = "icons/full/elcl16/export.gif"; //$NON-NLS-1$
-  public static final String DLCL_EXPORT        = "icons/full/dlcl16/export.gif"; //$NON-NLS-1$
-  public static final String ELCL_REMOVE        = "icons/full/elcl16/remove.gif"; //$NON-NLS-1$
-  public static final String DLCL_REMOVE        = "icons/full/dlcl16/remove.gif"; //$NON-NLS-1$
-  public static final String ELCL_REMOVEALL     = "icons/full/elcl16/removeall.gif"; //$NON-NLS-1$
-  public static final String DLCL_REMOVEALL     = "icons/full/dlcl16/removeall.gif"; //$NON-NLS-1$
+
+  public static final String ELCL_REFRESH = "icons/full/elcl16/refresh.gif"; //$NON-NLS-1$
+  public static final String DLCL_REFRESH = "icons/full/dlcl16/refresh.gif"; //$NON-NLS-1$
+  public static final String ELCL_IMPORT = "icons/full/elcl16/import.gif"; //$NON-NLS-1$
+  public static final String DLCL_IMPORT = "icons/full/dlcl16/import.gif"; //$NON-NLS-1$
+  public static final String ELCL_EXPORT = "icons/full/elcl16/export.gif"; //$NON-NLS-1$
+  public static final String DLCL_EXPORT = "icons/full/dlcl16/export.gif"; //$NON-NLS-1$
+  public static final String ELCL_REMOVE = "icons/full/elcl16/remove.gif"; //$NON-NLS-1$
+  public static final String DLCL_REMOVE = "icons/full/dlcl16/remove.gif"; //$NON-NLS-1$
+  public static final String ELCL_REMOVEALL = "icons/full/elcl16/removeall.gif"; //$NON-NLS-1$
+  public static final String DLCL_REMOVEALL = "icons/full/dlcl16/removeall.gif"; //$NON-NLS-1$
   public static final String ELCL_MERGESESSIONS = "icons/full/elcl16/mergesessions.gif"; //$NON-NLS-1$
   public static final String DLCL_MERGESESSIONS = "icons/full/dlcl16/mergesessions.gif"; //$NON-NLS-1$
-  public static final String ELCL_RELAUNCH      = "icons/full/elcl16/relaunch.gif"; //$NON-NLS-1$
-  public static final String DLCL_RELAUNCH      = "icons/full/dlcl16/relaunch.gif"; //$NON-NLS-1$
-  public static final String ELCL_SESSION       = "icons/full/elcl16/session.gif"; //$NON-NLS-1$
-  public static final String DLCL_SESSION       = "icons/full/dlcl16/session.gif"; //$NON-NLS-1$
-  public static final String ELCL_SHOWPROJECTS  = "icons/full/elcl16/showprojects.gif"; //$NON-NLS-1$
+  public static final String ELCL_RELAUNCH = "icons/full/elcl16/relaunch.gif"; //$NON-NLS-1$
+  public static final String DLCL_RELAUNCH = "icons/full/dlcl16/relaunch.gif"; //$NON-NLS-1$
+  public static final String ELCL_SESSION = "icons/full/elcl16/session.gif"; //$NON-NLS-1$
+  public static final String DLCL_SESSION = "icons/full/dlcl16/session.gif"; //$NON-NLS-1$
+  public static final String ELCL_SHOWPROJECTS = "icons/full/elcl16/showprojects.gif"; //$NON-NLS-1$
   public static final String ELCL_SHOWPACKAGEROOTS = "icons/full/elcl16/showpackageroots.gif"; //$NON-NLS-1$
-  public static final String ELCL_SHOWPACKAGES  = "icons/full/elcl16/showpackages.gif"; //$NON-NLS-1$
-  public static final String ELCL_SHOWTYPES     = "icons/full/elcl16/showtypes.gif"; //$NON-NLS-1$
-  public static final String ELCL_COLLAPSEALL   = "icons/full/elcl16/collapseall.gif"; //$NON-NLS-1$
-  public static final String ELCL_LINKED        = "icons/full/elcl16/linked.gif"; //$NON-NLS-1$
+  public static final String ELCL_SHOWPACKAGES = "icons/full/elcl16/showpackages.gif"; //$NON-NLS-1$
+  public static final String ELCL_SHOWTYPES = "icons/full/elcl16/showtypes.gif"; //$NON-NLS-1$
+  public static final String ELCL_COLLAPSEALL = "icons/full/elcl16/collapseall.gif"; //$NON-NLS-1$
+  public static final String ELCL_LINKED = "icons/full/elcl16/linked.gif"; //$NON-NLS-1$
 
-  public static final String EVIEW_COVERAGE     = "icons/full/eview16/coverage.gif"; //$NON-NLS-1$
+  public static final String EVIEW_COVERAGE = "icons/full/eview16/coverage.gif"; //$NON-NLS-1$
 
-  public static final String OBJ_SESSION        = "icons/full/obj16/session.gif"; //$NON-NLS-1$
+  public static final String OBJ_SESSION = "icons/full/obj16/session.gif"; //$NON-NLS-1$
 
-  private static final String[] OBJ_COVERAGE = new String[] { 
-    "icons/full/obj16/coverage00.gif", //$NON-NLS-1$
-    "icons/full/obj16/coverage01.gif", //$NON-NLS-1$
-    "icons/full/obj16/coverage02.gif", //$NON-NLS-1$
-    "icons/full/obj16/coverage03.gif", //$NON-NLS-1$
-    "icons/full/obj16/coverage04.gif", //$NON-NLS-1$
-    "icons/full/obj16/coverage05.gif", //$NON-NLS-1$
-    "icons/full/obj16/coverage06.gif", //$NON-NLS-1$
-    "icons/full/obj16/coverage07.gif", //$NON-NLS-1$
-    "icons/full/obj16/coverage08.gif", //$NON-NLS-1$
-    "icons/full/obj16/coverage09.gif", //$NON-NLS-1$
-    "icons/full/obj16/coverage10.gif", //$NON-NLS-1$
-    "icons/full/obj16/coverage11.gif", //$NON-NLS-1$
-    "icons/full/obj16/coverage12.gif"  //$NON-NLS-1$
+  private static final String[] OBJ_COVERAGE = new String[] {
+      "icons/full/obj16/coverage00.gif", //$NON-NLS-1$
+      "icons/full/obj16/coverage01.gif", //$NON-NLS-1$
+      "icons/full/obj16/coverage02.gif", //$NON-NLS-1$
+      "icons/full/obj16/coverage03.gif", //$NON-NLS-1$
+      "icons/full/obj16/coverage04.gif", //$NON-NLS-1$
+      "icons/full/obj16/coverage05.gif", //$NON-NLS-1$
+      "icons/full/obj16/coverage06.gif", //$NON-NLS-1$
+      "icons/full/obj16/coverage07.gif", //$NON-NLS-1$
+      "icons/full/obj16/coverage08.gif", //$NON-NLS-1$
+      "icons/full/obj16/coverage09.gif", //$NON-NLS-1$
+      "icons/full/obj16/coverage10.gif", //$NON-NLS-1$
+      "icons/full/obj16/coverage11.gif", //$NON-NLS-1$
+      "icons/full/obj16/coverage12.gif" //$NON-NLS-1$
   };
-  
-  private static final String[] OBJ_COVERAGE_OVERLAY = new String[] { 
-    "icons/full/ovr16/coverage00.gif", //$NON-NLS-1$
-    "icons/full/ovr16/coverage01.gif", //$NON-NLS-1$
-    "icons/full/ovr16/coverage02.gif", //$NON-NLS-1$
-    "icons/full/ovr16/coverage03.gif", //$NON-NLS-1$
-    "icons/full/ovr16/coverage04.gif", //$NON-NLS-1$
-    "icons/full/ovr16/coverage05.gif", //$NON-NLS-1$
-    "icons/full/ovr16/coverage06.gif", //$NON-NLS-1$
-    "icons/full/ovr16/coverage07.gif"  //$NON-NLS-1$
+
+  private static final String[] OBJ_COVERAGE_OVERLAY = new String[] {
+      "icons/full/ovr16/coverage00.gif", //$NON-NLS-1$
+      "icons/full/ovr16/coverage01.gif", //$NON-NLS-1$
+      "icons/full/ovr16/coverage02.gif", //$NON-NLS-1$
+      "icons/full/ovr16/coverage03.gif", //$NON-NLS-1$
+      "icons/full/ovr16/coverage04.gif", //$NON-NLS-1$
+      "icons/full/ovr16/coverage05.gif", //$NON-NLS-1$
+      "icons/full/ovr16/coverage06.gif", //$NON-NLS-1$
+      "icons/full/ovr16/coverage07.gif" //$NON-NLS-1$
   };
 
-  public static final String WIZBAN_EXPORT_SESSION  = "icons/full/wizban/export_session.gif"; //$NON-NLS-1$
-  public static final String WIZBAN_IMPORT_SESSION  = "icons/full/wizban/import_session.gif"; //$NON-NLS-1$
+  public static final String WIZBAN_EXPORT_SESSION = "icons/full/wizban/export_session.gif"; //$NON-NLS-1$
+  public static final String WIZBAN_IMPORT_SESSION = "icons/full/wizban/import_session.gif"; //$NON-NLS-1$
 
-  
   private static EclEmmaUIPlugin instance;
 
   private EditorTracker editorTracker;
-  
+
   private ISessionListener sessionListener = new ISessionListener() {
     public void sessionAdded(ICoverageSession addedSession) {
-      if (getPreferenceStore().getBoolean(UIPreferences.PREF_SHOW_COVERAGE_VIEW)) {
+      if (getPreferenceStore()
+          .getBoolean(UIPreferences.PREF_SHOW_COVERAGE_VIEW)) {
         getWorkbench().getDisplay().asyncExec(new Runnable() {
           public void run() {
             showCoverageView();
@@ -116,12 +116,14 @@
         });
       }
     }
+
     public void sessionRemoved(ICoverageSession removedSession) {
     }
+
     public void sessionActivated(ICoverageSession session) {
     }
   };
-  
+
   public void start(BundleContext context) throws Exception {
     super.start(context);
     CoverageTools.setPreferences(UIPreferences.CORE_PREFERENCES);
@@ -136,29 +138,31 @@
     CoverageTools.getSessionManager().removeSessionListener(sessionListener);
     super.stop(context);
   }
-  
+
   public static EclEmmaUIPlugin getInstance() {
     return instance;
   }
-  
+
   private void showCoverageView() {
     IWorkbenchWindow window = getWorkbench().getActiveWorkbenchWindow();
-    if (window == null) return;
+    if (window == null)
+      return;
     IWorkbenchPage page = window.getActivePage();
     if (page != null) {
       try {
-        IViewPart view = page.showView(CoverageView.ID, null, IWorkbenchPage.VIEW_CREATE);
+        IViewPart view = page.showView(CoverageView.ID, null,
+            IWorkbenchPage.VIEW_CREATE);
         page.bringToTop(view);
       } catch (PartInitException e) {
         log(e);
       }
     }
   }
-  
+
   public Shell getShell() {
     return getWorkbench().getActiveWorkbenchWindow().getShell();
   }
-  
+
   public static IStatus errorStatus(String message, Throwable t) {
     return new Status(IStatus.ERROR, ID, IStatus.ERROR, message, t);
   }
@@ -174,7 +178,7 @@
   public static void log(CoreException t) {
     instance.getLog().log(t.getStatus());
   }
-  
+
   public static ImageDescriptor getImageDescriptor(String key) {
     return loadImage(key).getDescriptor(key);
   }
@@ -182,21 +186,25 @@
   public static Image getImage(String key) {
     return loadImage(key).get(key);
   }
-  
+
   public static Image getCoverageImage(double ratio) {
     int idx = (int) Math.round(ratio * OBJ_COVERAGE.length);
-    if (idx < 0) idx = 0;
-    if (idx >= OBJ_COVERAGE.length) idx = OBJ_COVERAGE.length - 1;
+    if (idx < 0)
+      idx = 0;
+    if (idx >= OBJ_COVERAGE.length)
+      idx = OBJ_COVERAGE.length - 1;
     return getImage(OBJ_COVERAGE[idx]);
   }
-  
+
   public static ImageDescriptor getCoverageOverlay(double ratio) {
-	  int idx = (int) Math.round(ratio * OBJ_COVERAGE_OVERLAY.length);
-	  if (idx < 0) idx = 0;
-	  if (idx >= OBJ_COVERAGE_OVERLAY.length) idx = OBJ_COVERAGE_OVERLAY.length - 1;
-	  return getImageDescriptor(OBJ_COVERAGE_OVERLAY[idx]);
+    int idx = (int) Math.round(ratio * OBJ_COVERAGE_OVERLAY.length);
+    if (idx < 0)
+      idx = 0;
+    if (idx >= OBJ_COVERAGE_OVERLAY.length)
+      idx = OBJ_COVERAGE_OVERLAY.length - 1;
+    return getImageDescriptor(OBJ_COVERAGE_OVERLAY[idx]);
   }
-  
+
   private static ImageRegistry loadImage(String path) {
     ImageRegistry reg = getInstance().getImageRegistry();
     if (reg.getDescriptor(path) == null) {
@@ -205,5 +213,5 @@
     }
     return reg;
   }
-   
+
 }
Index: src/com/mountainminds/eclemma/internal/ui/launching/NoInstrumentedClassesHandler.java
===================================================================
--- src/com/mountainminds/eclemma/internal/ui/launching/NoInstrumentedClassesHandler.java	(revision 989)
+++ src/com/mountainminds/eclemma/internal/ui/launching/NoInstrumentedClassesHandler.java	(working copy)
@@ -3,7 +3,7 @@
  * This software is provided under the terms of the Eclipse Public License v1.0
  * See http://www.eclipse.org/legal/epl-v10.html.
  *
- * $Id: $
+ * $Id$
  ******************************************************************************/
 package com.mountainminds.eclemma.internal.ui.launching;
 
@@ -25,7 +25,7 @@
  * to open the launch dialog directly.
  * 
  * @author  Marc R. Hoffmann
- * @version $Revision: $
+ * @version $Revision$
  */
 public class NoInstrumentedClassesHandler implements IStatusHandler {
 
Index: src/com/mountainminds/eclemma/internal/ui/wizards/ExternalFileEditorInput.java
===================================================================
--- src/com/mountainminds/eclemma/internal/ui/wizards/ExternalFileEditorInput.java	(revision 989)
+++ src/com/mountainminds/eclemma/internal/ui/wizards/ExternalFileEditorInput.java	(working copy)
@@ -3,7 +3,7 @@
  * This software is provided under the terms of the Eclipse Public License v1.0
  * See http://www.eclipse.org/legal/epl-v10.html.
  *
- * $Id: $
+ * $Id$
  ******************************************************************************/
 package com.mountainminds.eclemma.internal.ui.wizards;
 
@@ -21,7 +21,7 @@
  * Editor input for external files.
  * 
  * @author Marc R. Hoffmann
- * @version $Revision: $
+ * @version $Revision$
  */
 public class ExternalFileEditorInput extends PlatformObject implements
     IPathEditorInput, ILocationProvider {
